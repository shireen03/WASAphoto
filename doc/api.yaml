openapi: 3.0.3
info:
  title: WasaPhoto API
  description: |-
    This OpenAPI document describes the functionalities of a social media platform, WasaPhoto. The website has all the basic features such as banning/unbanning other users, liking/unliking photos, upload/delete photos and commenting/uncommenting on photos. 
    
    This API supports Cross-Origin Resource Sharing (CORS), allowing it to interact with other domains in this API for data reasons to increase the website's usability.
    
    This API was created in 2023/2024.
    
  version: "5"
  
paths:
  /userLogIn:
    post:
      tags: ["login"]
      summary: Log in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user does exist, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: false
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: string
                    example: "abcdef012345"
  /setMyUserName:
    put:
      tags: ["user"]
      summary: Sets or updates the user's username 
      description: |-
        This endpoint allows the user to set their new username.
        If successful, it returns a message that the username has been updated. The username can not be set if it already exists.
      operationId: setMyUsername
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Shireen2003
                  minLength: 5
                  maxLength: 15
        required: true
      responses:
        '200':
          description: The username has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username updated successfully"
        '400':
          description: Username already exists
  /uploadPhoto:
    post:
      tags: ["photo"]
      summary: Upload a photo
      description: |-
        This endpoint allows a user to upload a photo.
      operationId: uploadPhoto
      requestBody:
        description: new photo upload request. If successful, a new photoID is created. Each photo has a unique identifier which is the photoID.
        content:
          image/png:
              schema:
                type: string
                format: binary
        required: true
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoID:
                    type: string
        
          
  /userFollow/{userId}:
    post:
      tags: ["user"]
      summary: Follow a user
      description: |-
        This endpoint allows a user to follow another user by their userID.
        If the user is already following the specified user, they will unfollow them, and if not, they will follow them.
      operationId: followUser
      parameters:
        - in: path
          name: userId
          required: true
          description: follow user
          schema:
            type: string
      responses:
        '200':
          description: User followed 
        '400':
          description: UserID not found
    delete:
        tags: ["user"]
        summary: Unfollow a user
        description: |-
          This endpoint allows a user to unfollow another user by their userID. 
        operationId: unfollowUser
        parameters:
          - in: path
            name: userId
            required: true
            description: User identifier to unfollow
            schema:
              type: string
        responses:
          '200':
            description: User unfollowed successfully
          '400':
            description: UserID not found
            
  /banUser/{userId}:
    post:
      tags: ["user"]
      summary: Ban a user
      description: |-
        This endpoint allows a user to ban another user by their userID.
        If the user is already banned, they will unban them, otherwise, they will ban them.
      operationId: banUser
      parameters:
        - in: path
          name: userId
          required: true
          description: ban user
          schema:
            type: string
      responses:
        '200':
          description: User banned
        '400':
          description: UserID not found
    delete:
        tags: ["user"]
        summary: Unban a user
        description: |-
          This endpoint allows a user to unfollow another user by their userID. 
        operationId: unbanUser
        parameters:
          - in: path
            name: userId
            required: true
            description: User to unban
            schema:
              type: string
        responses:
          '200':
            description: User unbanned successfully
          '400':
            description: UserID not found
            
            
  /getUserProfile/{userId}:
    get:
      tags: ["user"]
      summary: Get User Profile
      description: |-
        This endpoint allows you to retrieve a user's profile information by their userID.
      operationId: getUserProfile
      parameters:
        - in: path
          name: userId
          required: true
          description: UserID allowing to retrieve the profile
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
        
        '404':
          description: User profile not found

  /getMyStream:
    get:
      tags: ["user"]
      summary: Get User's Stream
      description: |-
        This endpoint allows a user to retrieve their stream. A user's stream is a set of photos from other users that they follow. The stream of photos are arranged in reverse chronological order, which includes information about the date and time of each photo uploaded, the number of likes, and the comments on each post.
      operationId: getMyStream
      responses:
        '200':
          description: User's stream acquired successfully
          content:
            image/png:
                schema:
                  type: object
                  properties:
                    userId:
                      type: string
                      example: "blah19"
                    streamData:
                      type: array
                      items:
                        type: object
                        properties:
                          photo:
                            type: string
                            format: binary
                            example: "pic.png"
                          uploadDateTime:
                            type: string
                            format: date-time
                            example: "2023-01-01T01:30:00Z" #january first 2023 at 1:30 AM
                          numberOfLikes:
                            type: integer
                            example: 10
                          comments:
                            type: array
                            items:
                              type: object
                              properties:
                                content:
                                  type: string
                                  example: "cool pic"
                      x-sort:
                        - uploadDateTime: desc
                  
        '400':
          description: Stream information not found
          
  /likePhoto/{photoID}:
    post:
      tags: ["photo"]
      summary: Like a Photo
      description: |-
        This endpoint allows a user to like a photo. If the user has already liked the photo, it will unlike the photo. The photoID is a string that uniquely identifies each photo.
      operationId: likePhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: Photo to like
          schema:
            type: string
            example: "pic1"
      responses:
        '200':
          description: Photo is liked
    delete:
      tags: ["photo"]
      summary: Unlike a photo
      description: |-
          This allows a user to unlike a photo.
      operationId: unlikePhoto
      parameters:
          - in: path
            name: photoID
            required: true
            description: photoID to unlike
            schema:
              type: string
              example: "pic1"
      responses:
        '201':
          description: Photo is unliked 
          
  
          
  /commentPhoto/{photoID}:
    post:
      tags: ["photo"]
      summary: comment on a photo
      description: |-
        This endpoint allows a user to write a comment on a photo. 
      operationId: commentPhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: photoID is a unique identifier to retrieve the post in which we would like to post the comment.
          schema:
            type: string
            example: "pic1"
      requestBody:
        description: Here we comment on the photo according to the photoID given as parameter. 
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "nice pic!"
        required: true
      responses:
        '200':
          description: User has commented on the photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentID:
                    type: string
                    example: "comment19"
        
          
    delete:
      tags: ["photo"]
      summary: Uncomment on a photo
      description: |-
          This allows a user to uncomment on a photo using the commentID.
      operationId: uncommentPhoto
      parameters:
          - in: path
            name: photoID
            required: true
            description: photoID is required to retrieve the post in which the user would like to uncomment.
            schema:
              type: string
              example: "comment1"
           
      responses:
        '200':
          description: uncommented on post 
          
  /deletePhoto/{photoID}:
    delete:
      tags: ["photo"]
      summary: Delete a Photo
      description: |-
        This endpoint allows a user to delete a photo.
      operationId: deletePhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: PhotoID is a unique identifier. This is needed to retrieve the specific photo to delete.
          schema:
            type: string
            example: "pic1"
      responses:
        '200':
          description: Photo deleted successfully
        '404':
          description: Photo not found

  

            
 

          
      
  
    
  
              
  



