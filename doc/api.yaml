openapi: 3.0.3
info:
  title: WasaPhoto API
  description: |-
    This OpenAPI document describes the functionalities of a social media platform, WasaPhoto. The website has all the basic features such as banning/unbanning other users, liking/unliking photos, upload/delete photos and commenting/uncommenting on photos. 
    
    This API supports Cross-Origin Resource Sharing (CORS), allowing it to interact with other domains in this API for data reasons to increase the website's usability.
    
    This API was created in 2023/2024.
    
  version: "7"
  
paths:
  /user/{username}/logIn:
    post:
      tags: ["user"]
      summary: Log in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user does exist, the user identifier is returned.
      security:
        - LegacyAuth: []

      operationId: doLogin
      parameters:
      - in: path
        name: username
        required: true
        description: username of the user
        schema:
          type: string
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: |- 
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: false
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: string
                    example: "abcdef012345"
   

  /user/{userID}/username{username}:
    put:
      tags: ["user"]
      summary: Sets or updates the user's username 
      description: |-
        This endpoint allows the user to set their new username.
        If successful, it returns a message that the username has been updated. The username can not be set if it already exists.
      security:
        - LegacyAuth: []
      operationId: setMyUsername
      parameters:
        - in: path
          name: userID
          required: true
          description: |-
            userID of the person who changes their username
          schema:
            type: string
        - in: path
          name: username
          required: true
          description: |-
            userID of the person the account owner wants to ban
          schema:
            type: string
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Shireen2003
                  minLength: 5
                  maxLength: 15
        required: true
      responses:
        '200':
          description: The username has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username updated successfully"
        '400':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "UserID not found"
          
  /photo/upload/{userID}:
    post:
      tags: ["photo"]
      summary: Upload a photo
      description: |-
        This endpoint allows a user to upload a photo.
      security:
        - LegacyAuth: []     
      operationId: uploadPhoto
      parameters:
        - in: path
          name: userID
          required: true
          description: |-
            post photo on user's account by identifying them with their userID.
          schema:
            type: string
      requestBody:
        description: |-
          new photo file upload request. If successful, a new photoID is
          created. Each photo has a unique identifier which is the photoID.
        content:
          image/png:
              schema: 
                type: object
                properties:
                  photoID:
                    type: string
                    format: binary
                    
          
        required: true

      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoID:
                    type: string
                    example: "pic1"
        
          
  /user/{userID}/follow/{followUserID}:
    post:
      tags: ["follow"]
      summary: Follow or unfollow a user
      description: |-
        This endpoint allows a user to follow or unfollow another user by their userID.
        If the user is already following the specified user, they will unfollow them, and if not, they will follow them.
      security:
        - LegacyAuth: []
      operationId: toggleFollowUser
      parameters:
        - in: path
          name: userID
          required: true
          description: follow user
          schema:
            type: string
        - in: path
          name: followUserID
          required: true
          description: userID of the person the account owner wants to follow
          schema:
            type: string
        
      
      responses:
        '200':
          description: User followed 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User followed successfully"
                  userID:
                    type: string
                    example: "shireen19"
        
        '400':
          description: UserID not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "userID not found"
                  
          
            
  /user/{userID}/ban/{banUserID}:
    post:
      tags: ["ban"]
      summary: Ban or unban a user
      description: |-
        This endpoint allows a user to ban another user by their userID.
        If the user is already banned, they will unban them, otherwise, they will ban them.
      security:
        - LegacyAuth: []
      operationId: toggleBanUser
      parameters:
        - in: path
          name: userID
          required: true
          description: ban user
          schema:
            type: string
        - in: path
          name: banUserID
          required: true
          description: userID of the person the account owner wants to ban
          schema:
            type: string
      responses:
        '200':
          description: User banned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username banned successfully"
                  userID:
                    type: string
                    example: "shireen19"
        '400':
          description: UserID not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "UserID not found"
   
  /user/{userId}/profile:
    get:
      tags: ["user"]
      summary: Get User Profile
      description: |-
        This endpoint allows you to retrieve a user's profile information by their userID.
      security:
        - LegacyAuth: []
      operationId: getUserProfile
      parameters:
        - in: path
          name: userId
          required: true
          description: UserID allowing to retrieve the profile
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User profile found"
                  userID: 
                    type: string
                    example: "shireen1919"
        
        '404':
          description: User profile not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User profile not found"

  /user/{userID}/stream:
    get:
      tags: ["user"]
      summary: Get User's Stream
      description: |-
        This endpoint allows a user to retrieve their stream. A user's stream is a set of photos from other users that they follow. The stream of photos are arranged in reverse chronological order, which includes information about the date and time of each photo uploaded, the number of likes, and the comments on each post.
      security:
        - LegacyAuth: []
      operationId: getMyStream
      parameters:
        - in: path
          name: userID
          required: true
          description: userID of the person's stream 
          schema:
            type: string
      responses:
        '200':
          description: User's stream acquired successfully
          content:
            image/png:
                schema:
                  type: object
                  properties:
                    userId:
                      type: string
                      example: "blah19"
                    streamData:
                      type: array
                      items:
                        type: object
                        properties:
                          photo:
                            type: string
                            format: binary
                            example: "pic.png"
                          uploadDateTime:
                            type: string
                            format: date-time
                            example: "2023-01-01T01:30:00Z" #january first 2023 at 1:30 AM
                          numberOfLikes:
                            type: integer
                            example: 10
                          comments:
                            type: array
                            items:
                              type: object
                              properties:
                                content:
                                  type: string
                                  example: "cool pic"
                      x-sort:
                        - uploadDateTime: desc
                  
        '400':
          description: Stream information not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "profile stream unavailable"
          
  /photo/{photoID}/like/{userID}:
    post:
      tags: ["like"]
      summary: Like or unlike a Photo
      description: |-
        This endpoint allows a user to like a photo. If the user has already liked the photo, it will unlike the photo. The photoID is a string that uniquely identifies each photo.
      security:
        - LegacyAuth: []
      operationId: toggleLikePhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: adding a like to a collection of likes
          schema:
            type: string
            example: "pic1"
        - in: path
          name: userID
          required: true
          description: |-
            userID of the person who likes a photo
          schema:
            type: string
      responses:
        '200':
          description: Photo is liked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "photo is liked"
                  photoID:
                    type: string
                    example: "pic1"

    
          
  /photo/{photoID}/comment/{userID}:
    post:
      tags: ["comment"]
      summary: comment on a photo
      description: |-
        This endpoint allows a user to write a comment on a photo. 
      security:
        - LegacyAuth: []
      operationId: commentPhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: photoID is a unique identifier to retrieve the post in which we would like to post the comment.
          schema:
            type: string
            example: "pic1"
        - in: path
          name: userID
          required: true
          description: userID of the person who comments on a photo
          schema:
            type: string
      requestBody:
        description: Here we comment on the photo according to the photoID given as parameter. 
        content:
          application/json:
            schema:
              type: object
              properties:
                commentID:
                  type: string
                  example: "nice pic!"
      responses:
        '200':
          description: User has commented on the photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentID:
                    type: string
                    example: "comment19"
                  
        
          
    delete:
      tags: ["comment"]
      summary: Uncomment on a photo
      description: |-
          This allows a user to uncomment on a photo using the commentID.
      security:
        - LegacyAuth: []
      operationId: uncommentPhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: photoID is required to retrieve the post in which the             user would like to uncomment.
          schema:
              type: string
              example: "comment1"
        - in: path
          name: userID
          required: true
          description: userID of the person who uncomments on photo
          schema:
            type: string
           
      responses:
        '200':
          description: comment deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentID:
                    type: string
                    example: "comment123"
          
  /photo/{photoID}/remove:
    delete:
      tags: ["photo"]
      summary: Delete a Photo
      description: |-
        This endpoint allows a user to delete a photo.
      security:
        - LegacyAuth: []
      operationId: deletePhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: |-
            PhotoID is a unique identifier. This is needed to retrieve the
            specific photo to delete.
          schema:
            type: string
            example: "pic1"
      responses:
        '200':
          description: Photo is deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "photo removed successfully"
                  photoID:
                    type: string
                    example: "pic1"
        '404':
          description: Photo not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "photoID not found"
                
components:
  securitySchemes:
    LegacyAuth:
      type: apiKey
      in: header
      name: X-api-key
      description: |-
        App session token value. This value is sent by the server in the login
        and session refresh APIs.

            
 

          
      
  
    
  
              
  



